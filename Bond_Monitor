import pandas as pd
import numpy as np
import sklearn as sk
import datetime as dt
import statsmodels.formula.api as smf
import statsmodels.tsa.api as smt
import statsmodels.api as sm
import scipy.stats as scs
from statsmodels.tsa.stattools import adfuller
import os
import sklearn.metrics as sk_m
from sklearn import linear_model
from sklearn.decomposition import PCA
os.environ["NUMBER_OF_PROCESSORS"] = "2"
import seaborn as sns; sns.set(color_codes=True)
import plotly.plotly as ply


def gather_data(filename, sheet):
    df = pd.read_excel(filename, sheetname=sheet)
    # drop columns where all the values are na
    df = df.dropna(axis=1, how='all')
    # naming the columns properly
    return df


def process_headers(df):
    df = df.copy()
    curr_colnames = list(df.columns)
    colnames = list(df.loc[0, :])
    for i, col in enumerate(list(curr_colnames)):
        if col.find("Unnamed") != -1:
            curr_colnames[i] = curr_colnames[i - 1]
            col = curr_colnames[i - 1]
        colnames[i] = str(col) + '__' + str(colnames[i])
    df.columns = colnames
    df = df.loc[1:, :]
    return df


def process_timeline(df):
    # aligns the dataframe with single timeline
    # break the dataframe into separate dataframes with regards to timelines
    df_dict = {}
    count_dates = [0 if x.lower().find('date') == -1 else 1 for x in list(df.columns)]

    ct_df = 0
    start = 0
    start_index = 0
    for i, dt in enumerate(count_dates):
        if dt == 1 and start == 0:
            df_dict[ct_df] = pd.DataFrame()
            start_index = i
            start = 1

        elif dt == 1:
            df_dict[ct_df] = df.iloc[:, start_index:i]
            ct_df = ct_df + 1
            start_index = i

        elif i == len(count_dates) - 1 and start == 1:
            df_dict[ct_df] = df.iloc[:, start_index:]
            start = 0

    for key in sorted(list(df_dict.keys())):
        temp_df = df_dict[key].copy()
        temp_df = temp_df.loc[temp_df.iloc[:, 0].dropna().index, :]
        temp_df.index = temp_df.iloc[:, 0]
        temp_df = temp_df.iloc[:, 1:]
        df_dict[key] = temp_df

    # merging the dataframes together
    total_df = np.nan
    for i, key in enumerate(sorted(list(df_dict.keys()))):
        if i == 0:
            total_df = df_dict[key]
        else:
            # print key, df_dict[key].head()
            total_df = total_df.merge(df_dict[key], left_index=True, right_index=True, how='outer')
    return total_df
    pass


def trade_calc(df, securities):
    # calculates the flies on 1-2-1 basis and gets the time-series of the fly
    pass
    if len(securities) == 2:
        return -1 * (df[securities[0]]) + 1 * (df[securities[1]])
    return -1 * (df[securities[0]]) + 2 * (df[securities[1]]) + -1 * (df[securities[2]])


def trade_pca_calc(df, securities):
    temp_df = df[securities].dropna()

    X = np.array((temp_df[securities] - temp_df.shift(1)[securities]).dropna())
    pca_model = PCA()
    pca_model.fit(X)
    weights = pca_model.components_[len(securities) - 1, :]
    if len(securities) == 2:
        weights = weights / weights[1]
        print weights
        return weights[0] * df[securities[0]] + weights[1] * df[securities[1]]

    weights = weights / weights[1] * 2.
    print weights
    return weights[0] * df[securities[0]] + weights[1] * df[securities[1]] + weights[2] * df[securities[2]]
    pass


def rolling_pca_calc(df, securities, window):
    full_temp_df = df[securities].dropna()
    rolling_pca = pd.DataFrame(columns=securities, index=full_temp_df.index)
    use_index = rolling_pca.index
    for i, ind in enumerate(use_index[window:]):
        temp_df = full_temp_df.loc[use_index[i]:ind, securities].dropna()
        X = np.array((temp_df[securities] - temp_df.shift(1)[securities]).dropna())
        pca_model = PCA()
        pca_model.fit(X)
        weights = pca_model.components_[len(securities) - 1, :]
        weights = weights / weights[1]
        rolling_pca.loc[ind, :] = weights.tolist()

    return rolling_pca


# mean reversion equation - dxt = a(b-xt-1) + error


def mean_reversion(flies):
    # Returns mean reversion characteristics for fly entered
    # Xt - X(t-1) = alpha*(theta - X(t-1)) + sigma*N(0,1)
    model_gaussian = linear_model.LinearRegression()
    dt_flies = flies - flies.shift(1)
    X = np.array(flies.shift(1).dropna()).reshape((-1, 1))
    Y = np.array(dt_flies.dropna()).reshape((-1, 1))
    model_gaussian.fit(X=X, y=Y)
    alpha = model_gaussian.coef_[0] * -1.
    theta = model_gaussian.intercept_ / alpha
    r_squared = sk_m.r2_score(Y, model_gaussian.predict(X))
    return list(alpha)[0], list(theta)[0], r_squared
    # Log(2)/alpha is the half life of the trade
    # Theta is the long term average
    # Trade idea will be displacement (Current value - Theta)/alpha - metric and compare against sigma for z-score
    pass

filename = r'/Users/Abhishek/Downloads/Datafin_orig.xlsx'

test_frame = gather_data(filename,'Data-Bonds')
ret_frame = process_headers(test_frame)

ret_df = process_timeline(ret_frame)

filename_headers = r'/Users/Abhishek/Desktop/Projects/Bond-Swap-Fly-monitor/Datafin.xlsx'
headers = pd.read_excel(filename_headers,sheetname='Sheet 31')
headers.index = headers.iloc[:,0]
headers = headers.iloc[:,1:]

#printing pca_flies

fly_list = [2, 5, 10]
import matplotlib.pyplot as plt

plt.style.use('ggplot')
fly_country_dict = {key: np.nan for key in list(headers.columns)}
pca_fly_country_dict = {key: np.nan for key in list(headers.columns)}
for country in fly_country_dict.keys()[:]:
    tickerlist = [headers.loc[str(x) + 'Y', country] for x in fly_list]
    metric = 'YLD_YTM_MID'
    tickerlist = [x + ' Govt__' + metric for x in tickerlist]
    print country
    print tickerlist

    try:
        pca_fly_country_dict[country] = pd.DataFrame(trade_pca_calc(ret_df, tickerlist).dropna(),
                                                     columns=['PCA_Fly' + ''.join([str(x) for x in fly_list])])
        fly_country_dict[country] = pd.DataFrame(trade_calc(ret_df, tickerlist).dropna(),
                                                 columns=['1-2-1_Fly' + ''.join([str(x) for x in fly_list])])
        ax = pca_fly_country_dict[country].plot(legend=True)
        fly_country_dict[country].plot(legend=True, ax=ax)
        plt.show()
        (alpha, theta, r_squared) = mean_reversion(pca_fly_country_dict[country])
        print 'Mean Reversion characteristics for PCA Fly'
        # print alpha, theta, float(pca_curve_country_dict[country].iloc[-1,:])
        print {'half-life': np.log(2) / alpha, 'Average': theta
            , 'Current_Displacement': theta - float(pca_fly_country_dict[country].iloc[-1, :])
            , 'R-squared': r_squared}
        # axes = sns.tsplot(pca_fly_country_dict[country].dropna())
        # axes1 = sns.tsplot(fly_country_dict[country].dropna())
        # plt.legend([axes.plot,axes1.plot],[country+'pca',country+'1-2-1'])
    except:
        print "Did not work"


# Intra-Country flies regressions for both PCA and 1-2-1 weighted flies

def realign_dates(df_list):
    df_list = [pd.DataFrame(x) for x in df_list]
    master_df = df_list[0]
    for x in df_list[1:]:
        master_df = master_df.merge(x, how='outer', left_index=True, right_index=True)

    master_df = master_df.dropna()
    df_list = [master_df[col] for col in master_df.columns]
    return df_list


def ret_regression(ret_df, Ylist, Y_country, Xlist, X_country, metric='YLD_YTM_MID', del_changes=True):
    Y_tickerlist = [headers.loc[str(x) + 'Y', Y_country] + ' Govt__' + metric for x in Ylist]
    X_tickerlist = [headers.loc[str(x) + 'Y', X_country] + ' Govt__' + metric for x in Xlist]

    Y_country = Y_country + ''.join([str(x) for x in Ylist])
    X_country = X_country + ''.join([str(x) for x in Xlist])

    if Y_country == X_country:
        print "Regression Not Possible"
        return 0.

    fly_country_dict = {key: np.nan for key in [Y_country, X_country]}
    pca_fly_country_dict = {key: np.nan for key in [Y_country, X_country]}

    try:
        print Y_country + ' PCA_Fly Weights'
        pca_fly_country_dict[Y_country] = pd.DataFrame(trade_pca_calc(ret_df, Y_tickerlist).dropna()
                                                       , columns=[Y_country + 'PCA_Fly'])
        print X_country + ' PCA_Fly Weights'
        pca_fly_country_dict[X_country] = pd.DataFrame(trade_pca_calc(ret_df, X_tickerlist).dropna()
                                                       , columns=[X_country + 'PCA_Fly'])

        fly_country_dict[Y_country] = pd.DataFrame(trade_calc(ret_df, Y_tickerlist).dropna()
                                                   , columns=[Y_country + '1-2-1_Fly'])
        fly_country_dict[X_country] = pd.DataFrame(trade_calc(ret_df, X_tickerlist).dropna()
                                                   , columns=[X_country + '1-2-1_Fly'])

    except:
        print "Did not work at data referencing level"
        return 0.
    if del_changes:
        lm = sk.linear_model.LinearRegression(fit_intercept=False)
        lm_1 = sk.linear_model.LinearRegression(fit_intercept=False)
        # We want to fit the model Del Fly1 ~ Del Fly2

        Y = pca_fly_country_dict[Y_country] - pca_fly_country_dict[Y_country].shift(1)
        Y = Y.dropna()
        X = pca_fly_country_dict[X_country] - pca_fly_country_dict[X_country].shift(1)
        X = X.dropna()
        input_list = realign_dates([Y, X])
        Y = np.array(input_list[0]).reshape((-1, 1));
        X = np.array(input_list[1]).reshape((-1, 1))

        # model = sm.OLS(Y,X,hasconst = True)
        # results = model.fit()
        lm.fit(X=X, y=Y)

        Y_1 = fly_country_dict[Y_country] - fly_country_dict[Y_country].shift(1)
        Y_1 = Y_1.dropna()
        X_1 = fly_country_dict[X_country] - fly_country_dict[X_country].shift(1)
        X_1 = X_1.dropna()
        input_list = realign_dates([Y_1, X_1])
        Y_1 = np.array(input_list[0]).reshape((-1, 1));
        X_1 = np.array(input_list[1]).reshape((-1, 1))
        lm_1.fit(X=X_1, y=Y_1)
        # return results
        return {'PCA': {'beta': lm.coef_[0][0], 'r2-score': sk_m.r2_score(Y, lm.predict(X))},
                '1-2-1': {'beta': lm_1.coef_[0][0], 'r2-score': sk_m.r2_score(Y_1, lm_1.predict(X_1))}}
    else:
        lm = sk.linear_model.LinearRegression()
        Y = pca_fly_country_dict[Y_country]
        X = pca_fly_country_dict[X_country]
        input_list = realign_dates([Y, X])
        Y = np.array(input_list[0]).reshape((-1, 1));
        X = np.array(input_list[1]).reshape((-1, 1))
        lm.fit(X=X, y=Y)
        return {'beta': lm.coef_[0][0], 'intercept': lm.intercept_[0][0], 'r2-score': sk_m.r2_score(Y, lm.predict(X))}


print 'Check 2-5-10 vs 3-5-7 as both are medium tenors'

Ylist = [2,5,10]
Xlist = [3,5,7]
for country in list(headers.columns):
    print 'Regression Results'
    print ret_regression(ret_df,Ylist,country,Xlist,country)

print r'Check 2-3-5 vs 5-10-30 to compare the convexity relationships across curves'

Ylist = [2,3,5]
Xlist = [5,10,30]
for country in list(headers.columns):
    print 'Regression Results'
    print ret_regression(ret_df,Ylist,country,Xlist,country)
# As expected, very little correlation between the short end and the lond end convexity

#Check 5-7-10 vs 2-10-30 to compare movement of belly convexity and the curve convexity

Ylist = [5,7,10]
Xlist = [2,10,30]
for country in list(headers.columns):
    print 'Regression Results'
    print ret_regression(ret_df,Ylist,country,Xlist,country)

#Inter-Country flies regression
X_country = 'GER'
Y_country = 'FRA'
compare_fly_list = [[2,3,5],[3,5,7],[5,7,10],[5,10,30]]
for fly in compare_fly_list:
    print 'Regression Results - ' +','.join([str(x) for x in fly])
    print ret_regression(ret_df,fly,Y_country,fly,X_country)

#Part 2
curve_list = [5, 10]
import matplotlib.pyplot as plt

plt.style.use('ggplot')
curve_country_dict = {key: np.nan for key in list(headers.columns)}
pca_curve_country_dict = {key: np.nan for key in list(headers.columns)}
for country in list(headers.columns)[:1]:
    tickerlist = [headers.loc[str(x) + 'Y', country] for x in curve_list]
    metric = 'YLD_YTM_MID'
    tickerlist = [x + ' Govt__' + metric for x in tickerlist]
    print country
    print tickerlist

    try:
        pca_curve_country_dict[country] = pd.DataFrame(trade_pca_calc(ret_df, tickerlist).dropna()
                                                       , columns=['PCA_Curve' + ''.join([str(x) for x in curve_list])])
        curve_country_dict[country] = pd.DataFrame(trade_calc(ret_df, tickerlist).dropna()
                                                   , columns=['1-1_Curve' + ''.join([str(x) for x in curve_list])])
        ax = pca_curve_country_dict[country].plot(legend=True)
        curve_country_dict[country].plot(legend=True, ax=ax)
        print 'PCA Weighted and Regular Curve Plots'
        plt.show()
        (alpha, theta, r_squared) = mean_reversion(pca_curve_country_dict[country])
        print 'Mean Reversion characteristics for PCA curve'
        # print alpha, theta, float(pca_curve_country_dict[country].iloc[-1,:])
        print {'half-life': np.log(2) / alpha, 'Average': theta
            , 'Current_Displacement': theta - float(pca_curve_country_dict[country].iloc[-1, :])
            , 'R-squared': r_squared}

        print 'Rolling PCA Weights Plots'
        rolling_df = rolling_pca_calc(ret_df, tickerlist, window=100)
        # print rolling_df.loc[dt.datetime.date(year =2016, month=8, day =1):dt.datetime.date(year=2016,month=8,day=10),:]
        # print (rolling_df - rolling_df.shift(1)).dropna().loc['2016-08-01':'2016-08-10',:]


        rolling_df.dropna().plot(legend=True)
        plt.show()


    except:
        print "Did not work"

    tsdiagnostics(np.array(pca_curve_country_dict[country]).ravel())

# Regression of curves vs the outrights levels of rates
import statsmodels.formula as smf
import statsmodels.tsa as smt
import statsmodels as sm
import scipy.stats as scs


def tsdiagnostics(y, lags=None, figsize=(10, 8), style='ggplot'):
    if not isinstance(y, pd.Series):
        y = pd.Series(y)
        y = y.dropna()

    with plt.style.context(style):
        fig = plt.figure(figsize=figsize)
        # mpl.rcParams['font.family'] = 'Ubuntu Mono'
        layout = (2, 2)
        ts_ax = plt.subplot2grid(layout, (0, 0), colspan=2)
        # acf_ax = plt.subplot2grid(layout, (1, 0))
        pacf_ax = plt.subplot2grid(layout, (1, 1))
        qq_ax = plt.subplot2grid(layout, (1, 0))
        # pp_ax = plt.subplot2grid(layout, (2, 1))

        y.plot(ax=ts_ax)
        ts_ax.set_title('Time Series Analysis Plots')
        # sm.graphics.tsaplots.plot_acf(y, lags=20, ax=acf_ax)
        # acf_df = pd.DataFrame([y.autocorr(i) for i in range(1,32)])
        # acf_df.plot(kind = 'bar',ax=acf_ax)
        sm.graphics.tsaplots.plot_pacf(y, lags=lags, ax=pacf_ax, alpha=0.5)
        sm.graphics.gofplots.qqplot(y, line='s', ax=qq_ax)
        qq_ax.set_title('QQ Plot')
        plt.show()
        # scs.probplot(np.array(y).ravel(), plot=pp_ax)#, sparams=(y.mean(), y.std())

        # plt.tight_layout()

        print 'ADF Tests'
        adf_test = adfuller(np.array(y), regression='c', autolag='AIC', store=False, regresults=False)

        print('ADF Statistic: %f' % adf_test[0])
        print('p-value: %f' % adf_test[1])
        print('Critical Values:')
        for key, value in adf_test[4].items():
            print('\t%s: %.3f' % (key, value))

        # hurst_exponent = 0.

        mean_reversion_results = mean_reversion(y)

        # return adf_test


def portfolio_regression(ret_df, Ylist, Yweights, Y_country, Xlist, Xweights, X_country
                         , metric='YLD_YTM_MID', del_changes=True):
    Y_tickerlist = [headers.loc[str(x) + 'Y', Y_country] + ' Govt__' + metric for x in Ylist]
    X_tickerlist = [headers.loc[str(x) + 'Y', X_country] + ' Govt__' + metric for x in Xlist]

    Y_country = Y_country + ''.join([str(x) for x in Ylist])
    X_country = X_country + ''.join([str(x) for x in Xlist])

    if Y_country == X_country:
        print "Regression Not Possible"
        return 0.

    trade_country_dict = {key: np.nan for key in [Y_country, X_country]}

    try:
        print Y_country + ' PCA_Fly Weights'
        trade_country_dict[Y_country] = pd.DataFrame(
            sum([ret_df[col] * weight for col, weight in zip(Y_tickerlist, Yweights)])
            , columns=[Y_country + '_portfolio_trade'])
        trade_country_dict[Y_country] = trade_country_dict[Y_country].dropna()

        trade_country_dict[X_country] = pd.DataFrame(
            sum([ret_df[col] * weight for col, weight in zip(X_tickerlist, Xweights)])
            , columns=[X_country + '_portfolio_trade'])
        trade_country_dict[X_country] = trade_country_dict[X_country].dropna()

    except:
        print "Did not work at data referencing level"
        return 0.
    if del_changes:
        lm = sk.linear_model.LinearRegression(fit_intercept=False)
        # We want to fit the model Del Fly1 ~ Del Fly2

        Y = trade_country_dict[Y_country] - trade_country_dict[Y_country].shift(1)
        Y = Y.dropna()
        X = trade_country_dict[X_country] - trade_country_dict[X_country].shift(1)
        X = X.dropna()
        input_list = realign_dates([Y, X])
        Y = np.array(input_list[0]).reshape((-1, 1));
        X = np.array(input_list[1]).reshape((-1, 1))

        # model = sm.OLS(Y,X,hasconst = True)
        # results = model.fit()
        lm.fit(X=X, y=Y)
        residuals = Y - lm.predict(X)
        tsdiagnostics(residuals)
        return {'beta': np.array(lm.coef_).ravel(), 'r2-score': sk_m.r2_score(Y, lm.predict(X))}

    else:
        lm = sk.linear_model.LinearRegression()
        Y = pca_fly_country_dict[Y_country]
        X = pca_fly_country_dict[X_country]
        input_list = realign_dates([Y, X])
        Y = np.array(input_list[0]).reshape((-1, 1));
        X = np.array(input_list[1]).reshape((-1, 1))
        lm.fit(X=X, y=Y)
        return {'beta': lm.coef_[0][0], 'intercept': lm.intercept_[0][0], 'r2-score': sk_m.r2_score(Y, lm.predict(X))}


def ret_custom_portfolio(ret_df, Ylist, Yweights, Y_country
                         , metric='YLD_YTM_MID', del_changes=True):
    Y_tickerlist = [headers.loc[str(x) + 'Y', Y_country] + ' Govt__' + metric for x in Ylist]

    Y_country = Y_country + ''.join([str(x) for x in Ylist])

    try:
        cust_portfolio = pd.DataFrame(sum([ret_df[col] * weight for col, weight in zip(Y_tickerlist, Yweights)])
                                      , columns=[Y_country + '_portfolio_trade'])
        cust_portfolio = cust_portfolio.dropna()
    except:
        print "Did not work at data referencing level"
        return 0.
    return cust_portfolio


# 3 Box analysis

def ret_box(ret_df, Ylist, Y_country, Xlist, X_country, metric='YLD_YTM_MID', del_changes=True):
    Y_tickerlist = [headers.loc[str(x) + 'Y', Y_country] + ' Govt__' + metric for x in Ylist]
    X_tickerlist = [headers.loc[str(x) + 'Y', X_country] + ' Govt__' + metric for x in Xlist]
    temp_df = ret_df[Y_tickerlist + X_tickerlist]
    temp_df = temp_df.copy().dropna()
    # print (temp_df[Y_tickerlist[1]]).head()
    Y_country = Y_country + ''.join([str(x) for x in Ylist])
    X_country = X_country + ''.join([str(x) for x in Xlist])

    return pd.DataFrame((temp_df[Y_tickerlist[1]] - temp_df[Y_tickerlist[0]]) / (temp_df[X_tickerlist[1]]
                                                                                 - temp_df[X_tickerlist[0]])
                        , columns=[Y_country + '_' + X_country + '_box_trade'])


# Germany and France 5,10
Ylist = [5, 10]
Xlist = Ylist
X_country = 'FRA'
Y_country = 'GER'

box_df = ret_box(ret_df.copy(), Ylist, Y_country, Xlist, X_country)
(alpha, theta, r_squared) = mean_reversion(box_df)
print 'Mean Reversion characteristics for Box Trade'
print {'half-life': np.log(2) / alpha, 'Average': theta
    , 'Current_Displacement': theta - float(pca_curve_country_dict[country].iloc[-1, :])
    , 'R-squared': r_squared}
tsdiagnostics(box_df.iloc[:, 0])


# 3 Regression box vs cross country spread level

def reg_box_xcy(ret_df, Ylist, Y_country, Xlist, X_country, metric='YLD_YTM_MID', del_changes=True):
    legY = portfolio_regression(ret_df, Ylist, [-1, 1], Y_country, [Ylist[1]], [1], Y_country)
    legX = portfolio_regression(ret_df, Xlist, [-1, 1], X_country, [Xlist[1]], [1], X_country)

    # port_legY = ret_custom_portfolio()

    return 0.


Ylist = [5, 10]
Xlist = Ylist
X_country = 'FRA'
Y_country = 'GER'
reg_box_xcy(ret_df.copy(), Ylist, Y_country, Xlist, X_country)